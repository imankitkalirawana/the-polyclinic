# Project Structure Guidelines

## Root Directory Organization

- [app/](mdc:app/): Next.js App Router pages and layouts
- [components/](mdc:components/): Reusable React components
- [lib/](mdc:lib/): Utility functions and configurations
- [models/](mdc:models/): Mongoose data models
- [services/](mdc:services/): Business logic and API services
- [types/](mdc:types/): TypeScript type definitions
- [store/](mdc:store/): Zustand state management
- [hooks/](mdc:hooks/): Custom React hooks
- [utils/](mdc:utils/): Utility functions and helpers

## App Directory Structure

- Follow Next.js App Router conventions
- Use `page.tsx` for route pages
- Use `layout.tsx` for shared layouts
- Use `loading.tsx` for loading states
- Use `error.tsx` for error boundaries
- Use `not-found.tsx` for 404 pages

## Components Directory

- Organize by feature (e.g., `components/appointments/`, `components/dashboard/`)
- Use `components/ui/` for reusable UI components
- Use `components/sections/` for page sections
- Use `components/skeletons/` for loading skeletons

## API Routes

- Use `app/api/` for API routes
- Version API routes (e.g., `app/api/v1/`)
- Organize by feature (e.g., `app/api/v1/appointments/`)
- Use proper HTTP method handlers

## Configuration Files

- [lib/config.ts](mdc:lib/config.ts): Application configuration
- [auth.ts](mdc:auth.ts): NextAuth.js configuration
- [next.config.mjs](mdc:next.config.mjs): Next.js configuration
- [tsconfig.json](mdc:tsconfig.json): TypeScript configuration
- [tailwind.config.js](mdc:tailwind.config.js): Tailwind CSS configuration

## Type Definitions

- Use [types/](mdc:types/) directory for shared types
- Define interfaces for API requests/responses
- Use proper TypeScript naming conventions
- Export types from index files

## State Management

- Use [store/](mdc:store/) for Zustand stores
- Organize stores by feature
- Use proper TypeScript typing for stores
- Implement proper state persistence

## Utility Functions

- Use [lib/](mdc:lib/) for shared utilities
- Use [utils/](mdc:utils/) for specific utility functions
- Use [hooks/](mdc:hooks/) for custom React hooks
- Follow proper naming conventions

## Assets and Static Files

- Use [public/](mdc:public/) for static assets
- Organize assets by type (images, icons, etc.)
- Use proper file naming conventions
- Optimize assets for web delivery
  description:
  globs:
  alwaysApply: false

---
