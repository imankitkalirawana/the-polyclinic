# Testing Guidelines

## Test Structure

- Use Jest as the testing framework
- Use React Testing Library for component testing
- Use MSW (Mock Service Worker) for API mocking
- Organize tests alongside source files or in `__tests__` directories

## Component Testing

- Test component rendering and user interactions
- Test component props and state changes
- Test error states and loading states
- Test accessibility features
- Use proper test data and mocks

## API Testing

- Test API endpoints with proper request/response validation
- Test error handling and edge cases
- Use proper test data and fixtures
- Test authentication and authorization
- Mock external dependencies

## Unit Testing

- Test utility functions and helpers
- Test business logic in service functions
- Test data validation and transformation
- Use proper test coverage targets
- Test edge cases and error scenarios

## Integration Testing

- Test component integration with APIs
- Test form submissions and data flow
- Test authentication flows
- Test routing and navigation
- Test state management integration

## E2E Testing

- Use Playwright or Cypress for end-to-end testing
- Test critical user journeys
- Test cross-browser compatibility
- Test responsive design
- Test performance under load

## Test Data Management

- Use factories for test data generation
- Use proper test fixtures and mocks
- Clean up test data after tests
- Use realistic test scenarios
- Avoid hardcoded test data

## Quality Assurance

- Run linting and formatting checks
- Ensure TypeScript compilation passes
- Check for accessibility issues
- Verify performance benchmarks
- Test security vulnerabilities

## Continuous Integration

- Run tests on every pull request
- Use proper CI/CD pipeline configuration
- Generate test coverage reports
- Fail builds on test failures
- Use proper test environment setup
  description:
  globs:
  alwaysApply: false

---
