# API Development Guidelines

## API Structure

- Use App Router API routes in [app/api/](mdc:app/api/) directory
- Follow RESTful conventions for route naming
- Use versioned API routes (e.g., `app/api/v1/`)
- Organize by feature (e.g., `app/api/v1/appointments/`, `app/api/v1/doctors/`)

## Route Handlers

- Use proper HTTP methods (GET, POST, PUT, DELETE, PATCH)
- Implement proper error handling with try-catch blocks
- Return actual error in catch block and a hardcoded error as fallback
- Return appropriate HTTP status codes
- Use proper response formats (JSON)

## Data Models

- Use Mongoose models defined in [models/](mdc:models/) directory
- Follow the schema patterns established in the project
- Use proper TypeScript interfaces for request/response types
- Implement proper validation using Zod schemas

## Authentication & Authorization

- Use NextAuth.js for authentication as configured in [auth.ts](mdc:auth.ts)
- Implement proper middleware for route protection
- Use session data for user context
- Implement role-based access control

## Database Operations

- Use Mongoose for MongoDB operations
- Implement proper error handling for database operations
- Use transactions when multiple operations are needed
- Implement proper indexing for performance
- Separate business logic from route handlers

## Service Layer

- Use service functions in [functions/api/](mdc:functions/api/) directory
- Separate business logic from route handlers
- Implement proper error handling and logging
- Use dependency injection patterns

## Error Handling

- Implement proper logging with Sentry
- Handle both expected and unexpected errors
- Provide meaningful error messages

## Validation

- Use Zod for request validation
- Implement proper input sanitization
- Validate all user inputs
- Use TypeScript for type safety

## Performance

- Implement proper caching strategies
- Use database indexing for queries
- Implement pagination for large datasets
- Use proper HTTP caching headers

## Testing

- Write unit tests for service functions
- Test API endpoints with proper test data
- Mock external dependencies
- Test error scenarios
  description:
  globs:
  alwaysApply: false

---
